{"version":3,"sources":["components/Header.js","components/Timer.js","components/TimerManager.js","components/App.js","theme.js","index.js"],"names":["Header","textAlign","fontSize","Timer","props","formatTime","time","seconds","minutes","hours","Math","floor","TimerManager","useState","setTime","timer","setTimer","notifs","setNotifs","paused","setPaused","useEffect","setTimeout","Notification","console","log","className","PresetButton","name","onClick","PauseContinueButton","NotificationButton","window","permission","requestPermission","then","perm","alert","App","theme","extendTheme","config","initialColorMode","useSystemColorMode","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5cfe4f9d.chunk.js","sourcesContent":["import { Box, Text } from '@chakra-ui/react';\n\nexport default function Header() {\n    return (\n      <Box textAlign=\"center\">\n        <Text fontSize=\"6xl\">Web Timer</Text>\n      </Box>\n    )\n}","import { Text } from \"@chakra-ui/react\";\n\nexport default function Timer(props) {\n    return (\n        <Text fontSize=\"10vw\">{formatTime(props.time)}</Text>\n    )\n}\n\nfunction formatTime(time) {\n    if (!time) time = 0;\n    var seconds = 0;\n    var minutes = 0;\n    var hours = 0;\n    seconds = time % 60;\n    time = Math.floor(time / 60);\n    minutes = time % 60;\n    hours = Math.floor(time / 60);\n    \n    return `${hours > 0 ? (hours > 9 ? hours : \"0\" + hours) : \"00\"}:${minutes > 0 ? (minutes > 9 ? minutes : \"0\" + minutes) : \"00\"}:${seconds > 0 ? (seconds > 9 ? seconds : \"0\" + seconds) : \"00\"}`\n}","import { Box, Button } from \"@chakra-ui/react\";\nimport Timer from \"./Timer\";\nimport { useState, useEffect } from \"react\";\n\nexport default function TimerManager() {\n    const [time, setTime] = useState(0);\n    const [timer, setTimer] = useState(false);\n    const [notifs, setNotifs] = useState(false);\n    const [paused, setPaused] = useState(false);\n\n    useEffect(() => {\n        if (time > 0 && timer) {\n            if (!paused) {\n                // Countdown\n                setTimeout(setTime, 1000, time - 1);\n            }\n        } else if (time > 0 && !timer) {\n            // Reset\n            setTime(0);\n        } else {\n            // Alert when timer is done\n            if (notifs) new Notification(\"Timer Done\");\n            setTimer(false);\n        }\n    }, [time]); // eslint-disable-line react-hooks/exhaustive-deps\n\n    useEffect(() => {\n        console.log(notifs)\n    }, [notifs]);\n\n    useEffect(() => {\n        setTime(time - 1);\n    }, [paused]);  // eslint-disable-line react-hooks/exhaustive-deps\n\n\n    return (\n        <Box textAlign=\"center\">\n            <Timer time={time} />\n            <Box className=\"controls\">\n                <PresetButton seconds={1 * 60} name=\"1 minute\" />\n                <PresetButton seconds={5 * 60} name=\"5 minutes\" />\n                <PresetButton seconds={10 * 60} name=\"10 minutes\" />\n                <PresetButton seconds={30 * 60} name=\"30 minutes\" />\n                <PresetButton seconds={60 * 60} name=\"1 hour\" />\n            </Box>\n            <br />\n            <Box className=\"options\">\n                <Button onClick={function() {\n                    setTimer(false);\n                    setTime(0);\n                }}>\n                    Reset\n                </Button>\n                <PauseContinueButton />\n                <NotificationButton notifs={notifs} />\n            </Box>\n        </Box>\n    )\n\n    // Buttons\n    function PresetButton(props) {\n        return (\n            <Button onClick={function() {\n                if (timer) return;\n                setTimer(true)\n                setTime(props.seconds);\n            }}>\n                {props.name}\n            </Button>\n        )\n    }\n\n    function PauseContinueButton() {\n        if  (!timer) return (\n            <Button>\n                Pause\n            </Button>\n        )\n        if (!paused) {\n            return (\n            <Button onClick={function() {\n                setPaused(true);\n            }}>\n                Pause\n            </Button>\n            )\n        } else {\n            return (\n            <Button onClick={function() {\n                setPaused(false);\n            }}>\n                Continue\n            </Button>\n            )\n        }\n    }\n\n    function NotificationButton(props) {\n        var enabled = props.notifs;\n        if (enabled) {\n            return (\n                <Button onClick={function() {\n                    setNotifs(false);\n                }}>Disable Notifications</Button>\n                )\n        } else {\n            return (\n    <Button onClick={function() {\n                    if (!(\"Notification\" in window)) {\n                        alert(\"This browser does not support desktop notifications!\");\n                    } else if (Notification.permission === \"granted\") {\n                        setNotifs(true);\n                    } else {\n                        Notification.requestPermission().then((perm) => {\n                            if (perm === \"granted\") {\n                                setNotifs(true);\n                              } else {\n                                  alert(\"Permission denied. Cannot use notifications...\")\n                              }\n                        })\n                    }\n                }}>Enable Notifications</Button>\n                ) \n        }\n    }   \n}","import { Box } from '@chakra-ui/react';\nimport './App.css';\nimport Header from './Header';\nimport TimerManager from './TimerManager';\n\nfunction App() {\n  return (\n    <Box>\n      <Header />\n      <TimerManager />\n    </Box>\n  );\n}\n\nexport default App;\n","import { extendTheme } from \"@chakra-ui/react\"\n\nconst config = {\n    initialColorMode: \"dark\",\n    useSystemColorMode: false,\n}\n\nconst theme = extendTheme({ config });\n\nexport default theme;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport { ChakraProvider } from '@chakra-ui/react';\nimport theme from './theme';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider theme={theme}>\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}